---
- name: install postgresql-client
  apt: name=postgresql-client update_cache=yes state=present

- name: system-wide install of psycopg2
  pip: name=psycopg2 state=present

- name: remove pyc files
  shell: find {{ code_dir }} -iname "*.pyc" -exec rm -f {} \;

- name: copy application requirements.txt to {{ tmp }}
  copy: src=requirements.txt dest={{ tmp }}/requirements.txt
  sudo: no

- name: install application requirements.txt to {{ virtualenv_dir }}
  pip: requirements={{ tmp }}/requirements.txt virtualenv={{ virtualenv_dir }}
  sudo: no

- name: check if the project exists
  stat: path={{ django_manage_path }}
  register: project_path

- name: create django project
  shell: '{{ virtualenv_bin_dir }}/python {{ virtualenv_bin_dir }}/django-admin.py startproject {{ project_name }} chdir={{ code_dir }}'
  when: create_project and not pull_repo and not project_path.stat.exists

- name: remove existing project if cloning
  shell: 'rm -rf {{ django_manage_path }}'
  when: pull_repo and project_path.stat.exists

- name: create project directory to clone into
  shell: 'mkdir {{ django_manage_path }}'
  when: pull_repo

- name: pull git repository
  git: dest={{ django_manage_path }} repo={{ repo_url }} accept_hostkey=yes version={{ repo_version }}
  when: pull_repo

- name: update permissions on django project
  shell: 'sudo chmod a+w {{ django_manage_path }}'
  sudo: yes

- name: generate django settings
  template: src=django/settings.py.j2
            dest={{ django_settings_path }} mode=644

- name: create django logs directory
  file: path={{ django_log_directory }} owner={{ user }} mode=755 state=directory

- name: prepare the database
  command: /bin/true
  notify:
    - run migrations
